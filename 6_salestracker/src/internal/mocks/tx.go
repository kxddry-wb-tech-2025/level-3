// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	models "salestracker/src/internal/models"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Tx is an autogenerated mock type for the Tx type
type Tx struct {
	mock.Mock
}

// Analytics provides a mock function with given fields: ctx, from, to
func (_m *Tx) Analytics(ctx context.Context, from *time.Time, to *time.Time) (models.Analytics, error) {
	ret := _m.Called(ctx, from, to)

	if len(ret) == 0 {
		panic("no return value specified for Analytics")
	}

	var r0 models.Analytics
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Time, *time.Time) (models.Analytics, error)); ok {
		return rf(ctx, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Time, *time.Time) models.Analytics); ok {
		r0 = rf(ctx, from, to)
	} else {
		r0 = ret.Get(0).(models.Analytics)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Time, *time.Time) error); ok {
		r1 = rf(ctx, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commit provides a mock function with no fields
func (_m *Tx) Commit() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateItem provides a mock function with given fields: ctx, req
func (_m *Tx) CreateItem(ctx context.Context, req models.PostRequest) (models.PostResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateItem")
	}

	var r0 models.PostResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.PostRequest) (models.PostResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.PostRequest) models.PostResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.PostResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.PostRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteItem provides a mock function with given fields: ctx, id
func (_m *Tx) DeleteItem(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadItems provides a mock function with given fields: ctx
func (_m *Tx) ReadItems(ctx context.Context) ([]models.Item, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadItems")
	}

	var r0 []models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Item, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Item); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rollback provides a mock function with no fields
func (_m *Tx) Rollback() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateItem provides a mock function with given fields: ctx, id, req
func (_m *Tx) UpdateItem(ctx context.Context, id string, req models.PutRequest) (models.PutResponse, error) {
	ret := _m.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateItem")
	}

	var r0 models.PutResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.PutRequest) (models.PutResponse, error)); ok {
		return rf(ctx, id, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.PutRequest) models.PutResponse); ok {
		r0 = rf(ctx, id, req)
	} else {
		r0 = ret.Get(0).(models.PutResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.PutRequest) error); ok {
		r1 = rf(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTx creates a new instance of Tx. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTx(t interface {
	mock.TestingT
	Cleanup(func())
}) *Tx {
	mock := &Tx{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
