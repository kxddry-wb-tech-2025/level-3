services:
  # postgres db
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=$POSTGRES_DB
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-eventbooker} || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 5s
    restart: unless-stopped
  
  migrator:
    image: migrate/migrate:v4.17.1
    container_name: migrator
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./migrations:/migrations:ro
    command:
      - -path=/migrations
      - -database
      - postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB?sslmode=disable
      - up

  # redis
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=$RABBITMQ_PASSWORD
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # kafka
  kafka:
      image: apache/kafka:latest
      container_name: kafka
      hostname: kafka
      expose:
        - "9092:9092"
        - "9093:9093"
      # ports:
        # - "29092:29092" # uncomment this to enable PLAINTEXT_HOST listener
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT, #PLAINTEXT_HOST:PLAINTEXT
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092, #PLAINTEXT_HOST://localhost:29092 # uncomment this to enable PLAINTEXT_HOST listener
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        KAFKA_PROCESS_ROLES: broker,controller
        KAFKA_NODE_ID: 1
        KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
        KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093, #PLAINTEXT_HOST://0.0.0.0:29092 # uncomment this to enable PLAINTEXT_HOST listener
        KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
        KAFKA_LOG_DIRS: /var/lib/kafka/data
        CLUSTER_ID: test_id
      volumes:
        - kafka-data:/var/lib/kafka/data
      healthcheck:
        test: [ "CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092" ]
        interval: 5s
        timeout: 2s
        retries: 10

  init-kafka:
      image: apache/kafka:latest
      container_name: init-kafka
      depends_on:
        kafka:
          condition: service_healthy
      entrypoint: ["/bin/sh", "-c"]
      command: |
        "
        # blocks until kafka is reachable
        /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list

        echo -e 'Creating kafka topics'
        /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic sent_notifications --replication-factor 1 --partitions 1


        echo -e 'Following topics available:'
        /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list
        "

  # notifier service
  notifier:
    image: ghcr.io/kxddry-wb-tech-2025/level-3/1_delayed_notifier
    expose:
      - 8085
    environment:
      - CONFIG_PATH=/app/config.yaml
      - NOTIFY_OTHER_SERVICES=true
      - RABBITMQ_PASSWORD=$RABBITMQ_PASSWORD
    volumes:
      - ./configs/notifier.yaml:/app/config.yaml
    depends_on:
      - postgres
      - rabbitmq
      - redis
      - kafka
      - migrator
    restart: always
  
  # eventbooker service
  eventbooker:
    build: .
    container_name: eventbooker
    expose:
      - 8080
    environment:
      - CONFIG_PATH=/app/config.yaml
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=$POSTGRES_DB
    volumes:
      - ./configs/app.yaml:/app/config.yaml
    depends_on:
      - postgres
      - rabbitmq
      - redis
      - kafka
      - migrator
    restart: always
  
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - eventbooker
    restart: unless-stopped
  
volumes:
  redis_data:
  kafka-data:
  postgres_data: